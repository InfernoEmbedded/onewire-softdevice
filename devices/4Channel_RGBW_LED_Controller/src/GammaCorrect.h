/* Copyright (c) 2017, Inferno Embedded
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of the Inferno Embedded nor the
 *    names of its contributors may be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL INFERNO EMBEDDED BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef FLAME_GAMMACORRECT_H_
#define FLAME_GAMMACORRECT_H_

#include <inttypes.h>

namespace infernoembedded {

const uint8_t gammaValues[] = {
	0,		0,		0,		0,		0,		0,		0,		0,
	0,		0,		0,		0,		0,		0,		0,		0,
	0,		0,		0,		0,		0,		0,		1,		1,
	1,		1,		1,		1,		1,		1,		1,		1,
	1,		2,		2,		2,		2,		2,		2,		2,
	2,		3,		3,		3,		3,		3,		4,		4,
	4,		4,		4,		5,		5,		5,		5,		6,
	6,		6,		6,		7,		7,		7,		7,		8,
	8,		8,		9,		9,		9,		10,		10,		10,
	11,		11,		12,		12,		12,		13,		13,		14,
	14,		15,		15,		15,		16,		16,		17,		17,
	18,		18,		19,		19,		20,		20,		21,		22,
	22,		23,		23,		24,		25,		25,		26,		26,
	27,		28,		28,		29,		30,		30,		31,		32,
	33,		33,		34,		35,		36,		36,		37,		38,
	39,		40,		40,		41,		42,		43,		44,		45,
	46,		46,		47,		48,		49,		50,		51,		52,
	53,		54,		55,		56,		57,		58,		59,		60,
	61,		62,		63,		64,		65,		67,		68,		69,
	70,		71,		72,		73,		75,		76,		77,		78,
	80,		81,		82,		83,		85,		86,		87,		89,
	90,		91,		93,		94,		95,		97,		98,		99,
	101,	102,	104,	105,	107,	108,	110,	111,
	113,	114,	116,	117,	119,	121,	122,	124,
	125,	127,	129,	130,	132,	134,	135,	137,
	139,	141,	142,	144,	146,	148,	150,	151,
	153,	155,	157,	159,	161,	163,	165,	166,
	168,	170,	172,	174,	176,	178,	180,	182,
	184,	186,	189,	191,	193,	195,	197,	199,
	201,	204,	206,	208,	210,	212,	215,	217,
	219,	221,	224,	226,	228,	231,	233,	235,
	238,	240,	243,	245,	248,	250,	253,	255
};

const uint8_t inverseGammaValues[] = {
	0,		28,		37,		43,		48,		53,		57,		61,
	64,		67,		70,		73,		75,		78,		80,		82,
	84,		86,		88,		90,		92,		94,		96,		97,
	99,		101,	102,	104,	105,	107,	108,	110,
	111,	113,	114,	115,	117,	118,	119,	120,
	122,	123,	124,	125,	126,	127,	129,	130,
	131,	132,	133,	134,	135,	136,	137,	138,
	139,	140,	141,	142,	143,	144,	145,	146,
	147,	148,	149,	149,	150,	151,	152,	153,
	154,	155,	155,	156,	157,	158,	159,	160,
	160,	161,	162,	163,	164,	164,	165,	166,
	167,	167,	168,	169,	170,	170,	171,	172,
	173,	173,	174,	175,	175,	176,	177,	177,
	178,	179,	179,	180,	181,	182,	182,	183,
	183,	184,	185,	185,	186,	187,	187,	188,
	189,	189,	190,	190,	191,	192,	192,	193,
	194,	194,	195,	195,	196,	197,	197,	198,
	198,	199,	199,	200,	201,	201,	202,	202,
	203,	203,	204,	205,	205,	206,	206,	207,
	207,	208,	208,	209,	209,	210,	211,	211,
	212,	212,	213,	213,	214,	214,	215,	215,
	216,	216,	217,	217,	218,	218,	219,	219,
	220,	220,	221,	221,	222,	222,	223,	223,
	224,	224,	225,	225,	226,	226,	227,	227,
	228,	228,	229,	229,	230,	230,	230,	231,
	231,	232,	232,	233,	233,	234,	234,	235,
	235,	235,	236,	236,	237,	237,	238,	238,
	239,	239,	240,	240,	240,	241,	241,	242,
	242,	243,	243,	243,	244,	244,	245,	245,
	246,	246,	246,	247,	247,	248,	248,	248,
	249,	249,	250,	250,	251,	251,	251,	252,
	252,	253,	253,	253,	254,	254,	255,	255
};

const uint16_t gammaValues16[] = {
	  0,     0,       0,      0,      1,      1,      1,      2,
	  3,      4,      5,      6,      8,     10,     12,     14,
	 16,     19,     22,     25,     28,     32,     36,     40,
	 45,     49,     54,     60,     65,     71,     78,     84,
	 91,     99,    106,    114,    123,    131,    140,    150,
	160,    170,    180,    191,    203,    214,    226,    239,
	252,    265,    279,    293,    308,    323,    338,    354,
	370,    387,    404,    422,    440,    459,    478,    497,
	517,    537,    558,    580,    602,    624,    647,    670,
	694,    718,    743,    769,    795,    821,    848,    875,
	903,    932,    961,    990,   1020,   1051,   1082,   1114,
   1146,   1179,   1212,   1246,   1281,   1316,   1352,   1388,
   1425,   1462,   1500,   1539,   1578,   1618,   1658,   1699,
   1740,   1783,   1825,   1869,   1913,   1957,   2002,   2048,
   2095,   2142,   2189,   2238,   2287,   2336,   2387,   2437,
   2489,   2541,   2594,   2647,   2702,   2756,   2812,   2868,
   2925,   2982,   3040,   3099,   3159,   3219,   3280,   3341,
   3403,   3466,   3530,   3594,   3659,   3725,   3791,   3858,
   3926,   3995,   4064,   4134,   4205,   4276,   4348,   4421,
   4494,   4569,   4644,   4720,   4796,   4873,   4951,   5030,
   5109,   5190,   5271,   5352,   5435,   5518,   5602,   5687,
   5772,   5858,   5946,   6033,   6122,   6211,   6301,   6392,
   6484,   6577,   6670,   6764,   6859,   6955,   7051,   7148,
   7246,   7345,   7445,   7545,   7647,   7749,   7852,   7955,
   8060,   8165,   8271,   8378,   8486,   8595,   8704,   8815,
   8926,   9038,   9151,   9264,   9379,   9494,   9610,   9727,
   9845,   9964,  10084,  10204,  10325,  10448,  10571,  10695,
  10819,  10945,  11072,  11199,  11327,  11456,  11586,  11717,
  11849,  11982,  12115,  12250,  12385,  12522,  12659,  12797,
  12936,  13076,  13216,  13358,  13500,  13644,  13788,  13934,
  14080,  14227,  14375,  14524,  14674,  14825,  14976,  15129,
  15283,  15437,  15593,  15749,  15906,  16065,  16224,  16384
};

const uint16_t gammaValues9[] = {
     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,
     1,     1,     1,     1,     1,     1,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     3,
     3,     3,     3,     4,     4,     4,     4,     5,
     5,     5,     6,     6,     6,     7,     7,     7,
     8,     8,     9,     9,    10,    10,    11,    11,
    12,    12,    13,    13,    14,    14,    15,    16,
    16,    17,    17,    18,    19,    20,    20,    21,
    22,    22,    23,    24,    25,    26,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,
    45,    46,    47,    48,    49,    51,    52,    53,
    54,    56,    57,    58,    60,    61,    63,    64,
    65,    67,    68,    70,    71,    73,    75,    76,
    78,    79,    81,    83,    84,    86,    88,    90,
    91,    93,    95,    97,    99,   101,   102,   104,
   106,   108,   110,   112,   114,   116,   118,   121,
   123,   125,   127,   129,   131,   134,   136,   138,
   140,   143,   145,   147,   150,   152,   155,   157,
   160,   162,   165,   167,   170,   172,   175,   178,
   180,   183,   186,   189,   191,   194,   197,   200,
   203,   206,   208,   211,   214,   217,   220,   223,
   226,   230,   233,   236,   239,   242,   245,   249,
   252,   255,   258,   262,   265,   269,   272,   275,
   279,   282,   286,   290,   293,   297,   300,   304,
   308,   311,   315,   319,   323,   326,   330,   334,
   338,   342,   346,   350,   354,   358,   362,   366,
   370,   374,   379,   383,   387,   391,   396,   400,
   404,   409,   413,   417,   422,   426,   431,   435,
   440,   445,   449,   454,   459,   463,   468,   473,
   478,   482,   487,   492,   497,   502,   507,   512
};

const uint16_t gammaValues10[] = {
     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     1,     1,     1,
     1,     1,     1,     2,     2,     2,     2,     3,
     3,     3,     3,     4,     4,     4,     5,     5,
     6,     6,     7,     7,     8,     8,     9,     9,
    10,    11,    11,    12,    13,    13,    14,    15,
    16,    17,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    29,    30,    31,
    32,    34,    35,    36,    38,    39,    40,    42,
    43,    45,    46,    48,    50,    51,    53,    55,
    56,    58,    60,    62,    64,    66,    68,    70,
    72,    74,    76,    78,    80,    82,    84,    87,
    89,    91,    94,    96,    99,   101,   104,   106,
   109,   111,   114,   117,   120,   122,   125,   128,
   131,   134,   137,   140,   143,   146,   149,   152,
   156,   159,   162,   165,   169,   172,   176,   179,
   183,   186,   190,   194,   197,   201,   205,   209,
   213,   217,   221,   225,   229,   233,   237,   241,
   245,   250,   254,   258,   263,   267,   272,   276,
   281,   286,   290,   295,   300,   305,   309,   314,
   319,   324,   329,   335,   340,   345,   350,   355,
   361,   366,   372,   377,   383,   388,   394,   400,
   405,   411,   417,   423,   429,   435,   441,   447,
   453,   459,   465,   472,   478,   484,   491,   497,
   504,   510,   517,   524,   530,   537,   544,   551,
   558,   565,   572,   579,   586,   593,   601,   608,
   615,   623,   630,   638,   645,   653,   661,   668,
   676,   684,   692,   700,   708,   716,   724,   732,
   741,   749,   757,   766,   774,   783,   791,   800,
   808,   817,   826,   835,   844,   853,   862,   871,
   880,   889,   898,   908,   917,   927,   936,   946,
   955,   965,   975,   984,   994,  1004,  1014,  1024
};


/* Gamma correct a value via a lookup table
 * This uses less program memory than calculated value, and uses less clocks
 * @param	value	the value to gamma correct
 * @return the gamma corrected value
 */
inline uint8_t precalculatedGammaCorrect(uint8_t value) {
	return gammaValues[value];
}

inline uint8_t precalculatedInverseGammaCorrect(uint8_t value) {
	return inverseGammaValues[value];
}

inline uint16_t precalculatedGammaCorrect9(uint8_t value) {
	return gammaValues9[value];
}

inline uint16_t precalculatedGammaCorrect10(uint8_t value) {
	return gammaValues10[value];
}

inline uint16_t precalculatedGammaCorrect16(uint8_t value) {
	return gammaValues16[value];
}

}

#endif /* FLAME_GAMMACORRECT_H_ */
